#!/usr/bin/env python3
"""
Quiz interactif avec saisie manuelle et correction par IA
Syst√®me de scoring bas√© sur la proximit√© de la r√©ponse et l'usage de termes techniques
"""

import re
import difflib
from typing import Dict, List, Tuple
from dataclasses import dataclass

@dataclass
class Question:
    """Structure d'une question de quiz avec r√©ponse textuelle"""
    id: int
    question_text: str
    expected_answer: str
    technical_terms: List[str]
    explanation: str
    difficulty: str
    category: str
    max_score: int = 100

class AIQuizCorrector:
    """Correcteur IA pour les r√©ponses textuelles"""
    
    def __init__(self):
        self.bonus_multiplier = 1.2  # Multiplicateur pour les termes techniques
        self.similarity_weight = 0.7  # Poids de la similarit√© textuelle
        self.technical_weight = 0.3   # Poids des termes techniques
        
    def normalize_text(self, text: str) -> str:
        """Normalise le texte pour la comparaison"""
        # Supprime la ponctuation et met en minuscules
        text = re.sub(r'[^\w\s]', '', text.lower())
        # Supprime les espaces multiples
        text = re.sub(r'\s+', ' ', text.strip())
        return text
    
    def calculate_similarity(self, user_answer: str, expected_answer: str) -> float:
        """Calcule la similarit√© entre deux textes"""
        user_norm = self.normalize_text(user_answer)
        expected_norm = self.normalize_text(expected_answer)
        
        # Utilise la similarit√© de s√©quence
        similarity = difflib.SequenceMatcher(None, user_norm, expected_norm).ratio()
        
        # Bonus pour les mots-cl√©s pr√©sents
        user_words = set(user_norm.split())
        expected_words = set(expected_norm.split())
        word_overlap = len(user_words.intersection(expected_words)) / len(expected_words) if expected_words else 0
        
        # Moyenne pond√©r√©e
        return (similarity * 0.6 + word_overlap * 0.4)
    
    def find_technical_terms(self, user_answer: str, technical_terms: List[str]) -> List[str]:
        """Trouve les termes techniques utilis√©s dans la r√©ponse"""
        user_norm = self.normalize_text(user_answer)
        found_terms = []
        
        for term in technical_terms:
            term_norm = self.normalize_text(term)
            if term_norm in user_norm:
                found_terms.append(term)
        
        return found_terms
    
    def correct_answer(self, question: Question, user_answer: str) -> Dict:
        """Corrige une r√©ponse utilisateur et attribue un score"""
        if not user_answer.strip():
            return {
                'score': 0,
                'max_score': question.max_score,
                'percentage': 0,
                'similarity': 0,
                'technical_terms_found': [],
                'technical_bonus': 0,
                'feedback': "Aucune r√©ponse fournie.",
                'detailed_explanation': question.explanation
            }
        
        # Calcul de la similarit√©
        similarity = self.calculate_similarity(user_answer, question.expected_answer)
        
        # Recherche des termes techniques
        technical_terms_found = self.find_technical_terms(user_answer, question.technical_terms)
        technical_ratio = len(technical_terms_found) / len(question.technical_terms) if question.technical_terms else 0
        
        # Score de base bas√© sur la similarit√© et les termes techniques
        base_score = (similarity * self.similarity_weight + technical_ratio * self.technical_weight) * question.max_score
        
        # Bonus pour les termes techniques
        technical_bonus = len(technical_terms_found) * 5  # 5 points par terme technique
        
        # Score final
        final_score = min(base_score + technical_bonus, question.max_score)
        
        # G√©n√©ration du feedback
        feedback = self.generate_feedback(similarity, technical_terms_found, question.technical_terms, final_score, question.max_score)
        
        return {
            'score': round(final_score, 1),
            'max_score': question.max_score,
            'percentage': round((final_score / question.max_score) * 100, 1),
            'similarity': round(similarity * 100, 1),
            'technical_terms_found': technical_terms_found,
            'technical_bonus': technical_bonus,
            'feedback': feedback,
            'detailed_explanation': question.explanation
        }
    
    def generate_feedback(self, similarity: float, found_terms: List[str], all_terms: List[str], score: float, max_score: float) -> str:
        """G√©n√®re un feedback personnalis√©"""
        percentage = (score / max_score) * 100
        
        if percentage >= 90:
            feedback = "üèÜ Excellente r√©ponse ! "
        elif percentage >= 75:
            feedback = "üëç Tr√®s bonne r√©ponse ! "
        elif percentage >= 60:
            feedback = "üìö Bonne r√©ponse, mais peut √™tre am√©lior√©e. "
        elif percentage >= 40:
            feedback = "üí™ R√©ponse partiellement correcte. "
        else:
            feedback = "üìñ La r√©ponse n√©cessite des am√©liorations importantes. "
        
        # Ajout d'informations sur les termes techniques
        if found_terms:
            feedback += f"Termes techniques utilis√©s correctement : {', '.join(found_terms)}. "
        
        missed_terms = [term for term in all_terms if term not in found_terms]
        if missed_terms:
            feedback += f"Termes techniques manqu√©s : {', '.join(missed_terms)}. "
        
        feedback += f"Similarit√© avec la r√©ponse attendue : {similarity * 100:.1f}%."
        
        return feedback

class AIQuizGame:
    """Jeu de quiz avec correction IA"""
    
    def __init__(self):
        self.corrector = AIQuizCorrector()
        self.questions = self.load_questions()
        self.current_question_index = 0
        self.total_score = 0
        self.max_total_score = 0
        self.results = []
    
    def load_questions(self) -> List[Question]:
        """Charge les questions depuis la base de donn√©es des quiz"""
        questions_data = [
            {
                "id": 1,
                "question_text": "Expliquez ce qu'est un pointeur en C et comment il fonctionne.",
                "expected_answer": "Un pointeur est une variable qui stocke l'adresse m√©moire d'une autre variable. Il permet d'acc√©der indirectement aux donn√©es en m√©moire en utilisant l'op√©rateur de d√©r√©f√©rencement *.",
                "technical_terms": ["pointeur", "adresse m√©moire", "variable", "d√©r√©f√©rencement", "op√©rateur *", "indirection"],
                "explanation": "Un pointeur en C est fondamental pour la gestion de la m√©moire dynamique et l'efficacit√© du code. L'op√©rateur & r√©cup√®re l'adresse d'une variable, tandis que * d√©r√©f√©rence un pointeur pour acc√©der √† la valeur.",
                "difficulty": "medium",
                "category": "c-programming"
            },
            {
                "id": 2,
                "question_text": "D√©crivez la diff√©rence entre malloc() et calloc() en C.",
                "expected_answer": "malloc() alloue un bloc de m√©moire de taille sp√©cifi√©e sans l'initialiser, tandis que calloc() alloue de la m√©moire pour un tableau d'√©l√©ments et initialise tous les octets √† z√©ro.",
                "technical_terms": ["malloc", "calloc", "allocation dynamique", "m√©moire", "initialisation", "z√©ro", "heap", "octets"],
                "explanation": "malloc() est plus rapide car elle n'initialise pas la m√©moire, mais calloc() garantit une m√©moire propre initialis√©e √† z√©ro, ce qui peut √©viter des bugs li√©s aux valeurs non initialis√©es.",
                "difficulty": "medium",
                "category": "c-programming"
            },
            {
                "id": 3,
                "question_text": "Qu'est-ce que la segmentation fault et pourquoi se produit-elle ?",
                "expected_answer": "Une segmentation fault est une erreur qui se produit quand un programme tente d'acc√©der √† une zone m√©moire qui ne lui appartient pas ou qui n'est pas autoris√©e, souvent caus√©e par un d√©r√©f√©rencement de pointeur invalide.",
                "technical_terms": ["segmentation fault", "SIGSEGV", "m√©moire", "pointeur invalide", "d√©r√©f√©rencement", "acc√®s m√©moire", "protection m√©moire"],
                "explanation": "Les segmentation faults sont un m√©canisme de protection du syst√®me d'exploitation pour emp√™cher les programmes d'√©craser la m√©moire d'autres processus ou du syst√®me.",
                "difficulty": "medium",
                "category": "c-programming"
            },
            {
                "id": 4,
                "question_text": "Expliquez le concept de gestion automatique de la m√©moire vs manuelle en C.",
                "expected_answer": "En C, la gestion m√©moire est manuelle : le programmeur doit explicitement allouer avec malloc/calloc et lib√©rer avec free. Contrairement aux langages avec garbage collector, C donne le contr√¥le total mais exige une discipline stricte.",
                "technical_terms": ["gestion m√©moire", "malloc", "free", "garbage collector", "allocation manuelle", "lib√©ration", "fuites m√©moire", "stack", "heap"],
                "explanation": "La gestion manuelle offre performance et contr√¥le pr√©cis, mais augmente le risque de fuites m√©moire et d'erreurs. Les langages modernes automatisent souvent cette gestion.",
                "difficulty": "hard",
                "category": "c-programming"
            },
            {
                "id": 5,
                "question_text": "D√©crivez ce qui se passe lors de la compilation d'un programme C.",
                "expected_answer": "La compilation C se fait en plusieurs √©tapes : pr√©processeur (macros, includes), compilateur (code source vers assembleur), assembleur (assembleur vers code objet), et √©diteur de liens (liaison des modules pour cr√©er l'ex√©cutable).",
                "technical_terms": ["pr√©processeur", "compilateur", "assembleur", "√©diteur de liens", "linker", "code objet", "ex√©cutable", "macros", "biblioth√®ques"],
                "explanation": "Chaque √©tape a un r√¥le sp√©cifique : le pr√©processeur traite les directives, le compilateur optimise et g√©n√®re du code machine, l'√©diteur de liens r√©sout les symboles externes.",
                "difficulty": "hard",
                "category": "c-programming"
            },
            {
                "id": 6,
                "question_text": "Expliquez la diff√©rence entre une variable automatique et statique en C.",
                "expected_answer": "Une variable automatique (locale) est cr√©√©e √† l'entr√©e d'une fonction et d√©truite √† la sortie, stock√©e sur la pile. Une variable statique conserve sa valeur entre les appels de fonction et existe pendant toute la dur√©e du programme.",
                "technical_terms": ["variable automatique", "variable statique", "pile", "stack", "dur√©e de vie", "port√©e", "allocation", "fonction"],
                "explanation": "Les variables automatiques sont efficaces en m√©moire mais temporaires, tandis que les variables statiques permettent de conserver un √©tat entre les appels mais consomment de la m√©moire en permanence.",
                "difficulty": "medium",
                "category": "c-programming"
            },
            {
                "id": 7,
                "question_text": "Qu'est-ce qu'un buffer overflow et comment peut-on l'√©viter ?",
                "expected_answer": "Un buffer overflow se produit quand des donn√©es √©crites dans un buffer d√©passent sa taille allou√©e, √©crasant la m√©moire adjacente. On peut l'√©viter en utilisant des fonctions s√©curis√©es comme strncpy, snprintf, et en validant les tailles d'entr√©e.",
                "technical_terms": ["buffer overflow", "d√©bordement", "buffer", "strncpy", "snprintf", "validation", "s√©curit√©", "m√©moire adjacente"],
                "explanation": "Les buffer overflows sont une source majeure de vuln√©rabilit√©s de s√©curit√©. La programmation d√©fensive avec v√©rification des bornes est essentielle.",
                "difficulty": "hard",
                "category": "c-programming"
            },
            {
                "id": 8,
                "question_text": "Expliquez le r√¥le et l'utilisation de l'op√©rateur sizeof en C.",
                "expected_answer": "L'op√©rateur sizeof retourne la taille en octets d'un type de donn√©es ou d'une variable au moment de la compilation. Il est essentiel pour l'allocation dynamique et la portabilit√© entre diff√©rentes architectures.",
                "technical_terms": ["sizeof", "octets", "compilation", "allocation dynamique", "portabilit√©", "architecture", "type de donn√©es"],
                "explanation": "sizeof est √©valu√© √† la compilation, pas √† l'ex√©cution. Il garantit la portabilit√© car la taille des types peut varier selon les syst√®mes (32-bit vs 64-bit).",
                "difficulty": "easy",
                "category": "c-programming"
            },
            {
                "id": 9,
                "question_text": "D√©crivez les diff√©rences entre les op√©rateurs de pr√© et post-incr√©mentation en C.",
                "expected_answer": "L'op√©rateur de pr√©-incr√©mentation (++i) incr√©mente la variable puis retourne sa nouvelle valeur. Le post-incr√©mentation (i++) retourne la valeur actuelle puis incr√©mente. La diff√©rence est importante dans les expressions complexes.",
                "technical_terms": ["pr√©-incr√©mentation", "post-incr√©mentation", "++i", "i++", "valeur de retour", "expression", "effet de bord"],
                "explanation": "Cette distinction est cruciale dans les boucles et expressions o√π l'ordre d'√©valuation affecte le r√©sultat. Le pr√©-incr√©mentation peut √™tre l√©g√®rement plus efficace en C++.",
                "difficulty": "medium",
                "category": "c-programming"
            },
            {
                "id": 10,
                "question_text": "Expliquez le concept de r√©cursion en C et donnez un exemple d'utilisation.",
                "expected_answer": "La r√©cursion est une technique o√π une fonction s'appelle elle-m√™me pour r√©soudre un probl√®me en le d√©composant en sous-probl√®mes similaires. Exemple : calcul factoriel o√π fact(n) = n * fact(n-1) avec un cas de base fact(0) = 1.",
                "technical_terms": ["r√©cursion", "fonction r√©cursive", "cas de base", "pile d'appels", "factoriel", "sous-probl√®mes", "auto-appel"],
                "explanation": "La r√©cursion n√©cessite un cas de base pour √©viter l'infini. Elle consomme de la m√©moire pile et peut causer un stack overflow si trop profonde.",
                "difficulty": "medium",
                "category": "c-programming"
            }
        ]
        
        return [Question(**q) for q in questions_data]
    
    def display_question(self, question: Question) -> None:
        """Affiche une question"""
        print(f"\n{'='*60}")
        print(f"QUESTION {question.id} - Difficult√©: {question.difficulty.upper()}")
        print(f"{'='*60}")
        print(f"\n{question.question_text}\n")
        print("R√©pondez de mani√®re d√©taill√©e en utilisant des termes techniques appropri√©s.")
        print("Plus votre r√©ponse est pr√©cise et technique, plus votre score sera √©lev√©.")
        print(f"Score maximum: {question.max_score} points")
        print("-" * 60)
    
    def get_user_answer(self) -> str:
        """R√©cup√®re la r√©ponse de l'utilisateur"""
        print("\nVotre r√©ponse:")
        lines = []
        print("(Tapez '###' sur une ligne vide pour terminer votre r√©ponse)")
        
        while True:
            try:
                line = input()
                if line.strip() == '###':
                    break
                lines.append(line)
            except KeyboardInterrupt:
                print("\n\nQuiz interrompu.")
                return ""
        
        return '\n'.join(lines)
    
    def display_results(self, result: Dict, question: Question) -> None:
        """Affiche les r√©sultats de la correction"""
        print(f"\n{'='*60}")
        print("R√âSULTATS DE LA CORRECTION")
        print(f"{'='*60}")
        print(f"Score obtenu: {result['score']:.1f}/{result['max_score']} points ({result['percentage']:.1f}%)")
        print(f"Similarit√© avec la r√©ponse attendue: {result['similarity']:.1f}%")
        
        if result['technical_terms_found']:
            print(f"Termes techniques utilis√©s: {', '.join(result['technical_terms_found'])}")
            print(f"Bonus technique: +{result['technical_bonus']} points")
        
        print(f"\nüìù Feedback: {result['feedback']}")
        
        print(f"\nüí° R√©ponse attendue:")
        print(f"{question.expected_answer}")
        
        print(f"\nüìö Explication d√©taill√©e:")
        print(f"{result['detailed_explanation']}")
        
        print(f"\n‚ö° Termes techniques importants pour cette question:")
        print(f"{', '.join(question.technical_terms)}")
        print("-" * 60)
    
    def display_final_score(self) -> None:
        """Affiche le score final"""
        percentage = (self.total_score / self.max_total_score) * 100 if self.max_total_score > 0 else 0
        
        print(f"\n{'='*60}")
        print("R√âSULTATS FINAUX DU QUIZ")
        print(f"{'='*60}")
        print(f"Score total: {self.total_score:.1f}/{self.max_total_score} points")
        print(f"Pourcentage: {percentage:.1f}%")
        
        if percentage >= 90:
            print("üèÜ Excellent ! Vous ma√Ætrisez parfaitement ces concepts.")
        elif percentage >= 75:
            print("üëç Tr√®s bien ! Quelques am√©liorations possibles.")
        elif percentage >= 60:
            print("üìö Correct ! Continuez √† √©tudier pour am√©liorer vos connaissances.")
        elif percentage >= 40:
            print("üí™ Effort appr√©ciable ! Il y a encore du travail √† faire.")
        else:
            print("üìñ Il est temps de revoir les bases !")
        
        print(f"\nD√©tail par question:")
        for i, result in enumerate(self.results, 1):
            print(f"Question {i}: {result['score']:.1f}/{result['max_score']} points ({result['percentage']:.1f}%)")
        
        print(f"{'='*60}")
    
    def run_quiz(self) -> None:
        """Lance le quiz interactif"""
        print("üß† QUIZ INTERACTIF AVEC CORRECTION IA")
        print("R√©pondez aux questions de mani√®re d√©taill√©e pour obtenir le meilleur score !")
        
        for i, question in enumerate(self.questions):
            self.display_question(question)
            user_answer = self.get_user_answer()
            
            if not user_answer:  # Quiz interrompu
                break
            
            result = self.corrector.correct_answer(question, user_answer)
            self.results.append(result)
            self.total_score += result['score']
            self.max_total_score += result['max_score']
            
            self.display_results(result, question)
            
            # Demander si continuer
            if i < len(self.questions) - 1:
                print(f"\nQuestion suivante ? (o/n): ", end="")
                continue_quiz = input().strip().lower()
                if continue_quiz in ['n', 'non', 'no']:
                    break
        
        self.display_final_score()

def main():
    """Fonction principale"""
    try:
        quiz = AIQuizGame()
        quiz.run_quiz()
    except KeyboardInterrupt:
        print("\n\nüëã Quiz termin√©. √Ä bient√¥t !")
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")

if __name__ == "__main__":
    main()
