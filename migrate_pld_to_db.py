#!/usr/bin/env python3
"""
Script pour migrer les questions PLD vers la base de donn√©es
"""
import sys
import os
sys.path.append('/home/krapaud/project-holbies/src')

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import PLDCategory, PLDTheme, PLDQuestion
from app.database import DATABASE_URL

# Questions PLD √† ins√©rer
PLD_QUESTIONS = {
    "shell": {
        "permission": [
            {
                "question_text": "Expliquez la diff√©rence entre chmod 755 et chmod 644 sur un fichier.",
                "expected_answer": "chmod 755 donne les permissions rwx pour le propri√©taire et rx pour le groupe et les autres, tandis que chmod 644 donne rw pour le propri√©taire et r pour le groupe et les autres. 755 est typique pour les ex√©cutables, 644 pour les fichiers de donn√©es.",
                "technical_terms": ["chmod", "permissions", "rwx", "propri√©taire", "groupe", "autres", "octal", "755", "644"],
                "explanation": "Les permissions Unix utilisent 3 bits par cat√©gorie : r(4) + w(2) + x(1). 755 = rwxr-xr-x, 644 = rw-r--r--",
                "difficulty": "medium",
                "max_score": 100
            },
            {
                "question_text": "Comment utiliser sudo et su de mani√®re s√©curis√©e ?",
                "expected_answer": "sudo permet d'ex√©cuter des commandes avec les privil√®ges d'un autre utilisateur (root par d√©faut) sans conna√Ætre son mot de passe. su change d'utilisateur. Utiliser sudo est plus s√©curis√© car il garde une trace des actions et permet un contr√¥le granulaire via /etc/sudoers.",
                "technical_terms": ["sudo", "su", "privil√®ges", "root", "sudoers", "s√©curit√©", "authentification", "logs"],
                "explanation": "sudo est pr√©f√©rable √† su car il offre un meilleur contr√¥le d'acc√®s et une meilleure tra√ßabilit√© des actions administratives.",
                "difficulty": "medium",
                "max_score": 100
            },
            {
                "question_text": "Expliquez les permissions sp√©ciales : setuid, setgid et sticky bit.",
                "expected_answer": "setuid (4000) permet √† un fichier de s'ex√©cuter avec les privil√®ges du propri√©taire. setgid (2000) avec ceux du groupe. sticky bit (1000) sur un r√©pertoire emp√™che la suppression de fichiers par d'autres utilisateurs que le propri√©taire.",
                "technical_terms": ["setuid", "setgid", "sticky bit", "4000", "2000", "1000", "privil√®ges", "s√©curit√©", "r√©pertoire"],
                "explanation": "Ces permissions sp√©ciales modifient le comportement standard et ont des implications importantes en s√©curit√©.",
                "difficulty": "hard",
                "max_score": 100
            }
        ],
        "io": [
            {
                "question_text": "Comment rediriger les sorties standard et d'erreur ?",
                "expected_answer": "< redirige l'entr√©e, > redirige la sortie (√©crase), >> ajoute √† la fin. 2> redirige stderr, &> redirige stdout et stderr ensemble. | pipe la sortie vers une autre commande.",
                "technical_terms": ["redirection", "stdout", "stderr", "stdin", ">", ">>", "2>", "&>", "|", "pipe"],
                "explanation": "La redirection permet de contr√¥ler les flux d'entr√©e/sortie et de cha√Æner les commandes efficacement.",
                "difficulty": "medium",
                "max_score": 100
            },
            {
                "question_text": "D√©crivez l'utilisation de grep pour rechercher dans les fichiers.",
                "expected_answer": "grep recherche des patterns dans les fichiers. Options utiles : -r (r√©cursif), -i (ignore la casse), -n (num√©ros de lignes), -v (inverse), -E (regex √©tendues). Exemple : grep -rn 'error' /var/log/",
                "technical_terms": ["grep", "recherche", "r√©cursif", "-r", "-i", "-n", "casse", "num√©ros de lignes", "pattern"],
                "explanation": "grep est un outil puissant de recherche textuelle avec de nombreuses options pour affiner les r√©sultats.",
                "difficulty": "easy",
                "max_score": 100
            }
        ]
    }
}

def main():
    # Connexion √† la base de donn√©es
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db = SessionLocal()
    
    try:
        print("üîÑ Migration des questions PLD vers la base de donn√©es...")
        
        # Supprimer les anciennes donn√©es
        db.query(PLDQuestion).delete()
        db.query(PLDTheme).delete()
        db.query(PLDCategory).delete()
        db.commit()
        print("‚úÖ Anciennes donn√©es supprim√©es")
        
        total_questions = 0
        
        # Cr√©er les cat√©gories, th√®mes et questions
        for category_name, themes_data in PLD_QUESTIONS.items():
            # Cr√©er la cat√©gorie
            category = PLDCategory(
                name=category_name,
                display_name=category_name.capitalize(),
                description=f"Questions de la cat√©gorie {category_name}"
            )
            db.add(category)
            db.flush()  # Pour obtenir l'ID
            print(f"üìÅ Cat√©gorie cr√©√©e: {category_name}")
            
            for theme_name, questions in themes_data.items():
                # Cr√©er le th√®me
                theme = PLDTheme(
                    name=theme_name,
                    display_name=theme_name.capitalize(),
                    description=f"Questions du th√®me {theme_name}",
                    category_id=category.id
                )
                db.add(theme)
                db.flush()  # Pour obtenir l'ID
                print(f"  üìÇ Th√®me cr√©√©: {theme_name}")
                
                for question_data in questions:
                    # Cr√©er la question
                    question = PLDQuestion(
                        question_text=question_data["question_text"],
                        expected_answer=question_data["expected_answer"],
                        technical_terms=question_data["technical_terms"],
                        explanation=question_data["explanation"],
                        difficulty=question_data["difficulty"],
                        max_score=question_data["max_score"],
                        theme_id=theme.id
                    )
                    db.add(question)
                    total_questions += 1
                    print(f"    ‚ùì Question cr√©√©e: {question_data['question_text'][:50]}...")
        
        db.commit()
        print(f"‚úÖ Migration termin√©e ! {total_questions} questions ajout√©es.")
        
    except Exception as e:
        db.rollback()
        print(f"‚ùå Erreur lors de la migration: {e}")
        return 1
    finally:
        db.close()
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
