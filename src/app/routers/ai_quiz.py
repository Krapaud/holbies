from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy.sql import func
from typing import List, Dict
from pydantic import BaseModel
import difflib
import re
import json
from datetime import datetime

from app.database import get_db
from app.models import User, AIQuizSession, AIQuizAnswer, PLDCategory, PLDTheme, PLDQuestion
from app.schemas import AIQuizSession as AIQuizSessionSchema, AIQuizAnswer as AIQuizAnswerSchema, AIQuizAnswerSubmission, AIQuizResult
from app.auth import get_current_active_user

router = APIRouter()

class AIQuestionResponse(BaseModel):
    question_id: int
    question_text: str
    expected_answer: str
    technical_terms: List[str]
    explanation: str
    difficulty: str
    category: str
    max_score: int = 100

class AIAnswerSubmission(BaseModel):
    question_id: int
    user_answer: str

class AIAnswerResult(BaseModel):
    score: float
    max_score: int
    percentage: float
    similarity: float
    technical_terms_found: List[str]
    technical_bonus: int
    feedback: str
    detailed_explanation: str

class AIQuizCorrector:
    """Correcteur IA pour les r√©ponses textuelles - Version API"""
    
    def __init__(self):
        self.bonus_multiplier = 1.2
        self.similarity_weight = 0.7
        self.technical_weight = 0.3
        
    def normalize_text(self, text: str) -> str:
        """Normalise le texte pour la comparaison"""
        text = re.sub(r'[^\w\s]', '', text.lower())
        text = re.sub(r'\s+', ' ', text.strip())
        return text
    
    def calculate_similarity(self, user_answer: str, expected_answer: str) -> float:
        """Calcule la similarit√© entre deux textes"""
        user_norm = self.normalize_text(user_answer)
        expected_norm = self.normalize_text(expected_answer)
        
        similarity = difflib.SequenceMatcher(None, user_norm, expected_norm).ratio()
        
        user_words = set(user_norm.split())
        expected_words = set(expected_norm.split())
        word_overlap = len(user_words.intersection(expected_words)) / len(expected_words) if expected_words else 0
        
        return (similarity * 0.6 + word_overlap * 0.4)
    
    def find_technical_terms(self, user_answer: str, technical_terms: List[str]) -> List[str]:
        """Trouve les termes techniques utilis√©s dans la r√©ponse"""
        user_norm = self.normalize_text(user_answer)
        found_terms = []
        
        for term in technical_terms:
            term_norm = self.normalize_text(term)
            if term_norm in user_norm:
                found_terms.append(term)
        
        return found_terms
    
    def correct_answer(self, question_data: Dict, user_answer: str) -> Dict:
        """Corrige une r√©ponse utilisateur et attribue un score"""
        if not user_answer.strip():
            return {
                'score': 0,
                'max_score': question_data['max_score'],
                'percentage': 0,
                'similarity': 0,
                'technical_terms_found': [],
                'technical_bonus': 0,
                'feedback': "Aucune r√©ponse fournie.",
                'detailed_explanation': question_data['explanation']
            }
        
        similarity = self.calculate_similarity(user_answer, question_data['expected_answer'])
        
        technical_terms_found = self.find_technical_terms(user_answer, question_data['technical_terms'])
        technical_ratio = len(technical_terms_found) / len(question_data['technical_terms']) if question_data['technical_terms'] else 0
        
        base_score = (similarity * self.similarity_weight + technical_ratio * self.technical_weight) * question_data['max_score']
        
        technical_bonus = len(technical_terms_found) * 5
        
        final_score = min(base_score + technical_bonus, question_data['max_score'])
        
        feedback = self.generate_feedback(similarity, technical_terms_found, question_data['technical_terms'], final_score, question_data['max_score'])
        
        return {
            'score': round(final_score, 1),
            'max_score': question_data['max_score'],
            'percentage': round((final_score / question_data['max_score']) * 100, 1),
            'similarity': round(similarity * 100, 1),
            'technical_terms_found': technical_terms_found,
            'technical_bonus': technical_bonus,
            'feedback': feedback,
            'detailed_explanation': question_data['explanation']
        }
    
    def generate_feedback(self, similarity: float, found_terms: List[str], all_terms: List[str], score: float, max_score: float) -> str:
        """G√©n√®re un feedback personnalis√©"""
        percentage = (score / max_score) * 100
        
        if percentage >= 90:
            feedback = "üèÜ Excellente r√©ponse ! "
        elif percentage >= 75:
            feedback = "üëç Tr√®s bonne r√©ponse ! "
        elif percentage >= 60:
            feedback = "üìö Bonne r√©ponse, mais peut √™tre am√©lior√©e. "
        elif percentage >= 40:
            feedback = "üí™ R√©ponse partiellement correcte. "
        else:
            feedback = "üìñ La r√©ponse n√©cessite des am√©liorations importantes. "
        
        if found_terms:
            feedback += f"Termes techniques utilis√©s correctement : {', '.join(found_terms)}. "
        
        missed_terms = [term for term in all_terms if term not in found_terms]
        if missed_terms:
            feedback += f"Termes techniques manqu√©s : {', '.join(missed_terms)}. "
        
        feedback += f"Similarit√© avec la r√©ponse attendue : {similarity * 100:.1f}%."
        
        return feedback

# Instance du correcteur IA
ai_corrector = AIQuizCorrector()

# ================================
# SERVICES DE BASE DE DONN√âES
# ================================

def get_questions_from_db(db: Session, category: str = None, theme: str = None):
    """R√©cup√©rer les questions depuis la base de donn√©es"""
    query = db.query(PLDQuestion).join(PLDTheme).join(PLDCategory)
    
    if category:
        query = query.filter(PLDCategory.name == category)
    
    if theme:
        query = query.filter(PLDTheme.name == theme)
    
    questions = query.all()
    
    # Convertir au format attendu par le frontend
    result = []
    for q in questions:
        result.append({
            "question_id": q.id,
            "question_text": q.question_text,
            "expected_answer": q.expected_answer,
            "technical_terms": json.loads(q.technical_terms),
            "explanation": q.explanation,
            "difficulty": q.difficulty,
            "category": q.theme.category.name,
            "theme": q.theme.name,
            "max_score": q.max_score
        })
    
    return result

def get_categories_from_db(db: Session):
    """R√©cup√©rer toutes les cat√©gories depuis la base de donn√©es"""
    categories = db.query(PLDCategory).all()
    return [
        {
            "name": cat.name,
            "display_name": cat.display_name,
            "description": cat.description,
            "icon": cat.icon,
            "question_count": sum(len(theme.questions) for theme in cat.themes)
        }
        for cat in categories
    ]

def get_themes_from_db(db: Session, category: str):
    """R√©cup√©rer les th√®mes d'une cat√©gorie depuis la base de donn√©es"""
    category_obj = db.query(PLDCategory).filter(PLDCategory.name == category).first()
    if not category_obj:
        return []
    
    return [
        {
            "name": theme.name,
            "display_name": theme.display_name,
            "description": theme.description,
            "icon": theme.icon,
            "question_count": len(theme.questions)
        }
        for theme in category_obj.themes
    ]

def find_question_by_id_db(db: Session, question_id: int):
    """Trouver une question par ID dans la base de donn√©es"""
    question = db.query(PLDQuestion).filter(PLDQuestion.id == question_id).first()
    if not question:
        return None
    
    return {
        "question_id": question.id,
        "question_text": question.question_text,
        "expected_answer": question.expected_answer,
        "technical_terms": json.loads(question.technical_terms),
        "explanation": question.explanation,
        "difficulty": question.difficulty,
        "category": question.theme.category.name,
        "theme": question.theme.name,
        "max_score": question.max_score
    }

def count_total_questions_db(db: Session):
    """Compter le nombre total de questions dans la base de donn√©es"""
    return db.query(PLDQuestion).count()

# AI Quiz Session Management Endpoints

# Base de donn√©es des questions textuelles (LEGACY - √† supprimer apr√®s migration)
# Base de donn√©es des questions avec structure hi√©rarchique : cat√©gorie -> th√®me -> questions
AI_QUESTIONS_DB = {
    "shell": {
        "permission": {
            1: {
                "question_id": 1,
                "question_text": "Expliquez la diff√©rence entre chmod 755 et chmod 644 sur un fichier.",
                "expected_answer": "chmod 755 donne les permissions rwx pour le propri√©taire et rx pour le groupe et les autres, tandis que chmod 644 donne rw pour le propri√©taire et r pour le groupe et les autres. 755 est typique pour les ex√©cutables, 644 pour les fichiers de donn√©es.",
                "technical_terms": ["chmod", "permissions", "rwx", "propri√©taire", "groupe", "autres", "octal", "755", "644"],
                "explanation": "Les permissions Unix utilisent 3 bits par cat√©gorie : r(4) + w(2) + x(1). 755 = rwxr-xr-x, 644 = rw-r--r--",
                "difficulty": "medium",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            2: {
                "question_id": 2,
                "question_text": "Comment changer le propri√©taire d'un fichier et pourquoi utiliser sudo ?",
                "expected_answer": "On utilise chown pour changer le propri√©taire : chown utilisateur:groupe fichier. Sudo est n√©cessaire car seul le root ou le propri√©taire actuel peut changer la propri√©t√© d'un fichier.",
                "technical_terms": ["chown", "propri√©taire", "groupe", "sudo", "root", "permissions", "utilisateur"],
                "explanation": "chown modifie les m√©tadonn√©es du syst√®me de fichiers. Sudo √©l√®ve temporairement les privil√®ges pour les op√©rations administratives.",
                "difficulty": "medium",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            3: {
                "question_id": 3,
                "question_text": "Que fait umask et comment calculer les permissions r√©sultantes ?",
                "expected_answer": "umask d√©finit les permissions par d√©faut en soustrayant ses valeurs des permissions maximales. Pour les fichiers (666), umask 022 donne 644. Pour les dossiers (777), umask 022 donne 755.",
                "technical_terms": ["umask", "permissions par d√©faut", "masque", "666", "777", "022", "soustraction"],
                "explanation": "umask agit comme un masque invers√© : il retire des permissions. Plus umask est √©lev√©, moins il y a de permissions accord√©es par d√©faut.",
                "difficulty": "hard",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            4: {
                "question_id": 4,
                "question_text": "Expliquez les permissions sp√©ciales : sticky bit, SUID et SGID.",
                "expected_answer": "SUID (4000) permet d'ex√©cuter avec les droits du propri√©taire, SGID (2000) avec ceux du groupe, sticky bit (1000) emp√™che la suppression par d'autres utilisateurs dans un r√©pertoire partag√©.",
                "technical_terms": ["sticky bit", "SUID", "SGID", "permissions sp√©ciales", "4000", "2000", "1000", "ex√©cution"],
                "explanation": "Ces permissions sp√©ciales modifient le comportement d'ex√©cution et d'acc√®s au-del√† des permissions standards rwx.",
                "difficulty": "hard",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            5: {
                "question_id": 5,
                "question_text": "Comment voir les permissions d√©taill√©es d'un fichier ?",
                "expected_answer": "ls -l affiche les permissions sous forme de cha√Æne (rwxrwxrwx), ls -la inclut les fichiers cach√©s, stat donne des informations d√©taill√©es incluant les permissions en octal.",
                "technical_terms": ["ls -l", "ls -la", "stat", "permissions", "octal", "fichiers cach√©s", "m√©tadonn√©es"],
                "explanation": "Plusieurs commandes permettent de voir les permissions avec diff√©rents niveaux de d√©tail selon les besoins.",
                "difficulty": "easy",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            6: {
                "question_id": 6,
                "question_text": "Quelle est la diff√©rence entre su et sudo ?",
                "expected_answer": "su change d'utilisateur compl√®tement et n√©cessite le mot de passe de l'utilisateur cible, sudo ex√©cute une commande avec des privil√®ges √©lev√©s en utilisant votre propre mot de passe et selon la configuration sudoers.",
                "technical_terms": ["su", "sudo", "utilisateur", "mot de passe", "privil√®ges", "sudoers", "switch user"],
                "explanation": "su est un changement complet d'identit√©, sudo est une √©l√©vation temporaire et contr√¥l√©e de privil√®ges.",
                "difficulty": "medium",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            },
            7: {
                "question_id": 7,
                "question_text": "Comment donner temporairement les permissions d'ex√©cution √† un script ?",
                "expected_answer": "chmod +x script.sh ajoute les permissions d'ex√©cution pour tous, ou chmod u+x pour le propri√©taire seulement. On peut aussi utiliser sh script.sh sans changer les permissions.",
                "technical_terms": ["chmod +x", "chmod u+x", "permissions d'ex√©cution", "script", "sh", "propri√©taire"],
                "explanation": "Les permissions d'ex√©cution sont n√©cessaires pour lancer un script directement. Alternativement, passer par l'interpr√©teur contourne cette exigence.",
                "difficulty": "easy",
                "category": "shell",
                "theme": "permission",
                "max_score": 100
            }
        },
        "io": {
            8: {
                "question_id": 8,
                "question_text": "Expliquez la diff√©rence entre >, >> et < dans le shell.",
                "expected_answer": "> redirige la sortie en √©crasant le fichier, >> ajoute √† la fin du fichier, < redirige l'entr√©e depuis un fichier. > et >> concernent la sortie (stdout), < concerne l'entr√©e (stdin).",
                "technical_terms": ["redirection", "stdout", "stdin", ">", ">>", "<", "√©crasement", "ajout", "entr√©e", "sortie"],
                "explanation": "Les redirections permettent de manipuler les flux d'entr√©e et sortie standard des commandes Unix.",
                "difficulty": "medium",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            9: {
                "question_id": 9,
                "question_text": "Comment fonctionne le pipe | et donnez un exemple d'utilisation ?",
                "expected_answer": "Le pipe | connecte la sortie d'une commande √† l'entr√©e de la suivante. Exemple : ls -l | grep '.txt' filtre les fichiers .txt dans la liste. C'est un m√©canisme de communication inter-processus.",
                "technical_terms": ["pipe", "|", "sortie", "entr√©e", "grep", "ls", "filtre", "inter-processus", "cha√Ænage"],
                "explanation": "Les pipes permettent de cha√Æner des commandes pour cr√©er des workflows complexes de traitement de donn√©es.",
                "difficulty": "medium",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            10: {
                "question_id": 10,
                "question_text": "Quelle est la diff√©rence entre 2> et 2>&1 ?",
                "expected_answer": "2> redirige stderr (erreurs) vers un fichier, 2>&1 redirige stderr vers stdout. Cela permet de capturer les erreurs avec la sortie normale ou de les traiter s√©par√©ment.",
                "technical_terms": ["stderr", "stdout", "2>", "2>&1", "redirection", "erreurs", "descripteur de fichier"],
                "explanation": "La gestion s√©par√©e des flux d'erreur et de sortie normale permet un meilleur contr√¥le du traitement des r√©sultats.",
                "difficulty": "hard",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            11: {
                "question_id": 11,
                "question_text": "Comment rechercher un mot dans des fichiers avec grep ?",
                "expected_answer": "grep 'mot' fichier recherche dans un fichier, grep -r 'mot' dossier/ recherche r√©cursivement, grep -i pour ignorer la casse, grep -n pour afficher les num√©ros de lignes.",
                "technical_terms": ["grep", "recherche", "r√©cursif", "-r", "-i", "-n", "casse", "num√©ros de lignes", "pattern"],
                "explanation": "grep est un outil puissant de recherche textuelle avec de nombreuses options pour affiner les r√©sultats.",
                "difficulty": "easy",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            12: {
                "question_id": 12,
                "question_text": "Comment utiliser find pour localiser des fichiers ?",
                "expected_answer": "find /chemin -name 'pattern' trouve par nom, find . -type f pour les fichiers seulement, find . -size +1M pour les fichiers > 1MB, find . -mtime -7 pour les fichiers modifi√©s dans les 7 derniers jours.",
                "technical_terms": ["find", "-name", "-type", "-size", "-mtime", "pattern", "fichiers", "r√©pertoires", "crit√®res"],
                "explanation": "find permet des recherches complexes bas√©es sur divers crit√®res : nom, type, taille, date de modification, permissions...",
                "difficulty": "medium",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            13: {
                "question_id": 13,
                "question_text": "Expliquez l'utilisation de head, tail et less.",
                "expected_answer": "head affiche les premi√®res lignes d'un fichier (d√©faut 10), tail les derni√®res lignes, less permet de naviguer dans un fichier page par page. tail -f suit un fichier en temps r√©el.",
                "technical_terms": ["head", "tail", "less", "premi√®res lignes", "derni√®res lignes", "navigation", "tail -f", "temps r√©el"],
                "explanation": "Ces outils permettent d'examiner des fichiers de diff√©rentes mani√®res selon les besoins : aper√ßu, fin de logs, lecture compl√®te.",
                "difficulty": "easy",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            },
            14: {
                "question_id": 14,
                "question_text": "Comment combiner plusieurs commandes avec && et || ?",
                "expected_answer": "&& ex√©cute la commande suivante seulement si la pr√©c√©dente r√©ussit (code de retour 0), || ex√©cute si la pr√©c√©dente √©choue. Exemple : make && make install || echo '√âchec'",
                "technical_terms": ["&&", "||", "code de retour", "succ√®s", "√©chec", "encha√Ænement conditionnel", "make"],
                "explanation": "Ces op√©rateurs permettent un contr√¥le de flux conditionnel bas√© sur le succ√®s ou l'√©chec des commandes pr√©c√©dentes.",
                "difficulty": "medium",
                "category": "shell",
                "theme": "io",
                "max_score": 100
            }
        }
    }
}

# AI Quiz Session Management Endpoints
@router.get("/sessions", response_model=List[AIQuizSessionSchema])
async def get_user_ai_quiz_sessions(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re toutes les sessions AI Quiz de l'utilisateur"""
    sessions = db.query(AIQuizSession).filter(
        AIQuizSession.user_id == current_user.id
    ).order_by(AIQuizSession.started_at.desc()).all()
    return sessions

@router.get("/sessions/active", response_model=AIQuizSessionSchema)
async def get_active_ai_quiz_session(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re la session AI Quiz active de l'utilisateur"""
    active_session = db.query(AIQuizSession).filter(
        AIQuizSession.user_id == current_user.id,
        AIQuizSession.completed == False
    ).first()
    
    if not active_session:
        raise HTTPException(
            status_code=404,
            detail="No active AI quiz session found"
        )
    
    return active_session

@router.post("/start", response_model=AIQuizSessionSchema)
async def start_ai_quiz_session(
    force_new: bool = False,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """D√©marre une nouvelle session AI Quiz"""
    # V√©rifier s'il y a une session active
    active_session = db.query(AIQuizSession).filter(
        AIQuizSession.user_id == current_user.id,
        AIQuizSession.completed == False
    ).first()
    
    if active_session and not force_new:
        # Retourner la session existante
        return active_session
    elif active_session and force_new:
        # Marquer l'ancienne session comme compl√©t√©e
        active_session.completed = True
        db.commit()
    
    # Cr√©er une nouvelle session
    ai_quiz_session = AIQuizSession(
        user_id=current_user.id,
        total_questions=count_total_questions_db(db)
    )
    db.add(ai_quiz_session)
    db.commit()
    db.refresh(ai_quiz_session)
    return ai_quiz_session

@router.get("/ai-questions", response_model=List[AIQuestionResponse])
async def get_ai_questions(
    category: str = None,
    theme: str = None,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re la liste des questions pour le quiz IA par cat√©gorie et/ou th√®me depuis la DB"""
    try:
        questions_data = get_questions_from_db(db, category, theme)
        
        if not questions_data:
            detail = "No questions found"
            if category and theme:
                detail = f"No questions found for category '{category}' and theme '{theme}'"
            elif category:
                detail = f"No questions found for category '{category}'"
            raise HTTPException(status_code=404, detail=detail)
        
        questions = []
        for question_data in questions_data:
            questions.append(AIQuestionResponse(**question_data))
        
        return questions
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error retrieving questions: {str(e)}"
        )

@router.get("/ai-questions/{question_id}", response_model=AIQuestionResponse)
async def get_ai_question(
    question_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re une question sp√©cifique pour le quiz IA depuis la DB"""
    question_data = find_question_by_id_db(db, question_id)
    if not question_data:
        raise HTTPException(
            status_code=404,
            detail="Question not found"
        )
    
    return AIQuestionResponse(**question_data)

@router.post("/submit-answer", response_model=AIAnswerResult)
async def submit_ai_answer(
    submission: AIQuizAnswerSubmission,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Soumet une r√©ponse textuelle pour correction par IA et sauvegarde dans une session"""
    # V√©rifier que la question existe dans la base de donn√©es
    question_data = find_question_by_id_db(db, submission.question_id)
    if not question_data:
        raise HTTPException(
            status_code=404,
            detail="Question not found"
        )
    
    # V√©rifier que la session existe et appartient √† l'utilisateur
    session = db.query(AIQuizSession).filter(
        AIQuizSession.id == submission.session_id,
        AIQuizSession.user_id == current_user.id,
        AIQuizSession.completed == False
    ).first()
    
    if not session:
        raise HTTPException(
            status_code=404,
            detail="Active AI quiz session not found"
        )
    
    # Correction par IA
    result = ai_corrector.correct_answer(question_data, submission.user_answer)
    
    # Sauvegarder la r√©ponse dans la base de donn√©es
    ai_answer = AIQuizAnswer(
        session_id=session.id,
        question_id=submission.question_id,
        question_text=question_data["question_text"],
        user_answer=submission.user_answer,
        expected_answer=question_data["expected_answer"],
        score=result["score"],
        max_score=result["max_score"],
        percentage=result["percentage"],
        similarity=result["similarity"],
        technical_terms_found=json.dumps(result["technical_terms_found"]),
        technical_bonus=result["technical_bonus"],
        feedback=result["feedback"]
    )
    
    db.add(ai_answer)
    
    # Mettre √† jour le score total de la session
    session.total_score += result["score"]
    
    db.commit()
    db.refresh(ai_answer)
    
    return AIAnswerResult(**result)

@router.post("/complete", response_model=AIQuizResult)
async def complete_ai_quiz_session(
    session_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Marque une session AI Quiz comme compl√©t√©e et retourne les r√©sultats"""
    session = db.query(AIQuizSession).filter(
        AIQuizSession.id == session_id,
        AIQuizSession.user_id == current_user.id,
        AIQuizSession.completed == False
    ).first()
    
    if not session:
        raise HTTPException(
            status_code=404,
            detail="Active AI quiz session not found"
        )
    
    # Marquer comme compl√©t√©e
    session.completed = True
    session.completed_at = datetime.utcnow()
    
    # Calculer le nombre de questions r√©pondues
    answered_questions = db.query(AIQuizAnswer).filter(
        AIQuizAnswer.session_id == session.id
    ).count()
    
    session.total_questions = answered_questions
    
    db.commit()
    
    # R√©cup√©rer toutes les r√©ponses pour les r√©sultats
    answers = db.query(AIQuizAnswer).filter(
        AIQuizAnswer.session_id == session.id
    ).all()
    
    # Calculer le pourcentage moyen
    average_percentage = (session.total_score / (answered_questions * 100)) * 100 if answered_questions > 0 else 0
    
    return AIQuizResult(
        session_id=session.id,
        total_score=session.total_score,
        total_questions=session.total_questions,
        average_percentage=average_percentage,
        answers=answers
    )

# Ancien endpoint maintenu pour compatibilit√© (sans session)
@router.post("/ai-submit", response_model=AIAnswerResult)
async def submit_ai_answer_legacy(
    submission: AIAnswerSubmission,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """Soumet une r√©ponse textuelle pour correction par IA (legacy - sans session)"""
    question_data = find_question_by_id_db(db, submission.question_id)
    if not question_data:
        raise HTTPException(
            status_code=404,
            detail="Question not found"
        )
    
    # Correction par IA
    result = ai_corrector.correct_answer(question_data, submission.user_answer)
    
    return AIAnswerResult(**result)

@router.get("/ai-quiz/demo")
async def get_demo_info(db: Session = Depends(get_db)):
    """Informations sur le quiz IA (accessible sans authentification pour d√©mo)"""
    return {
        "title": "Quiz IA avec Correction Automatique",
        "description": "Syst√®me de quiz avanc√© avec r√©ponses textuelles corrig√©es par IA",
        "features": [
            "R√©ponses textuelles libres",
            "Correction automatique par IA",
            "Scoring bas√© sur la pr√©cision et l'usage de termes techniques",
            "Feedback d√©taill√© personnalis√©",
            "Bonus pour les termes techniques"
        ],
        "scoring": {
            "similarity_weight": "70% - Similarit√© avec la r√©ponse attendue",
            "technical_weight": "30% - Usage des termes techniques",
            "technical_bonus": "5 points par terme technique utilis√©",
            "max_score_per_question": 100
        },
        "total_questions": count_total_questions_db(db)
    }

@router.get("/categories/{category}/themes")
async def get_category_themes(
    category: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re la liste des th√®mes disponibles pour une cat√©gorie depuis la DB"""
    themes_data = get_themes_from_db(db, category)
    
    if not themes_data:
        raise HTTPException(
            status_code=404,
            detail=f"Category '{category}' not found or has no themes"
        )
    
    return {"themes": themes_data}

@router.get("/categories")
async def get_categories(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_active_user)
):
    """R√©cup√®re la liste des cat√©gories disponibles depuis la DB"""
    categories_data = get_categories_from_db(db)
    return {"categories": categories_data}
